package stevebullimore.pclock.display

import scala.Vector

object Digit3x5 {
  val digits = Vector(
    List((0, 0), (1, 0), (2, 0), (0, 1), (0, 2), (0, 3), (0, 4), (1, 4), (2, 4), (2, 3), (2, 2), (2, 1)),
    List((1, 0), (1, 1), (1, 2), (1, 3), (1, 4)),
    List((0, 0), (1, 0), (2, 0), (2, 1), (2, 2), (1, 2), (0, 2), (0, 3), (0, 4), (1, 4), (2, 4)),
    List((0, 0), (1, 0), (2, 0), (2, 1), (2, 2), (1, 2), (2, 3), (2, 4), (1, 4), (0, 4)),
    List((0, 0), (0, 1), (0, 2), (1, 2), (2, 2), (2, 1), (2, 0), (2, 3), (2, 4)),
    List((0, 0), (1, 0), (2, 0), (0, 1), (2, 2), (1, 2), (0, 2), (2, 3), (0, 4), (1, 4), (2, 4)),
    List((0, 0), (1, 0), (2, 0), (0, 1), (2, 2), (1, 2), (0, 2), (2, 3), (0, 4), (1, 4), (2, 4), (0, 3)),
    List((0, 0), (1, 0), (2, 0), (2, 1), (2, 2), (2, 3), (2, 4)),
    List((0, 0), (1, 0), (2, 0), (0, 1), (0, 2), (0, 3), (0, 4), (1, 4), (2, 4), (2, 3), (2, 2), (2, 1), (1, 2)),
    List((0, 0), (1, 0), (2, 0), (0, 1), (0, 2), (0, 4), (1, 4), (2, 4), (2, 3), (2, 2), (2, 1), (1, 2)),
    List((0, 0), (2, 0), (0, 1), (2, 1), (1, 2), (0, 3), (0, 4), (2, 3), (2, 4)))

  def draw(xPos:Int, yPos:Int, digit: Int): List[(Int, Int)] = {
    digits(digit).map { case (x, y) => ((x + xPos).toInt, (y + yPos).toInt) }
  }
  def drawAsterix(xPos:Int, yPos:Int): List[(Int, Int)] = draw(xPos, yPos, 10)
}